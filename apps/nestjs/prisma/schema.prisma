generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url = env("DATABASE_URL")
}

model User {
	id						Int				@id @default(autoincrement())
	username				String			@unique
	login42					String			@unique
	avatar					String?
	twoFactorAuth			Boolean			@default(false)
	status					e_user_status	@default(ONLINE)
	friends					User[]			@relation("Friends")
	friendOf				User[]			@relation("Friends")
	blocked					User[]			@relation("Blocked")
	blockedBy				User[]			@relation("Blocked")
	friendRequestsSent		User[]			@relation("friendRequests")
	friendRequestsReceived	User[]			@relation("friendRequests")
	wins					Int				@default(0)
	losses					Int				@default(0)
	history					Match[]
	members					Member[]
	createdAt				DateTime		@default(now())
	updatedAt				DateTime		@updatedAt

	@@map("users")
}

model Match {
	id			Int				@id @default(autoincrement())
	playedBy	User[]
	score1		Int				@default(0)
	score2		Int				@default(0)
	map			e_match_map		@default(CLASSIC)
	powerUp		Boolean			@default(false)
	state		e_match_state	@default(PREPARATION)
	createdAt	DateTime		@default(now())
	updatedAt	DateTime		@updatedAt

	@@map("matches")
}

model Room {
	id			Int				@id @default(autoincrement())
	name		String?
	access		e_room_access	@default(PUBLIC)
	hash		String?
	members		Member[]

	@@map("rooms")
}

model Member {
	room		Room			@relation(fields: [room_id], references: [id])
	room_id		Int
	user		User			@relation(fields: [user_id], references: [id])
	user_id		Int
	role		e_member_role	@default(NONE)
	muted		Boolean			@default(false)
	muted_until	DateTime		@default(now())
	banned		Boolean			@default(false)
	messages	Message[]

	@@unique([room_id, user_id])
	@@map("members")
}

model Message {
	id			Int			@id @default(autoincrement())
	room		Member		@relation(fields: [room_id, user_id], references: [room_id, user_id])
	room_id		Int
	user_id		Int
	content		String		// Can be a link to a Match
	createdAt	DateTime	@default(now())

	@@map("messages")
}

enum e_user_status {
	ONLINE
	INQUEUE
	INGAME
	OFFLINE
}

enum e_match_map {
	CLASSIC
}

enum e_match_state {
	PREPARATION
	INPROGRESS
	FINISHED
}

enum e_room_access {
	PUBLIC
	PROTECTED
	PRIVATE
	DIRECT_MESSAGE
}

enum e_member_role {
	NONE
	ADMIN
	OWNER
}
